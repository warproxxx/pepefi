import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';

export interface WalletsState {
  provider: Object;
  library: Object;
  account: String;
  error: Object;
  chainId: Number;
  network: String;
}

const initialState: WalletsState = {
    provider: {},
    library: {},
    account: "",
    error: {},
    chainId: 0,
    network: ""
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const walletsSlice = createSlice({
  name: 'wallets',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setWallets: (state, action: PayloadAction<WalletsState>) => {
      state.provider = action.payload.provider;
      state.library = action.payload.library;
      state.account = action.payload.account;
      state.error = action.payload.error;
      state.chainId = action.payload.chainId;
      state.network = action.payload.network;
    },
    setProvider: (state, action: PayloadAction<any>) => {
      state.provider = action.payload.provider;
    },
    setLibrary: (state, action: PayloadAction<any>) => {
      state.library = action.payload.library;
    },
    setAccount: (state, action: PayloadAction<any>) => {
      state.account = action.payload.account;
    },
    setError: (state, action: PayloadAction<any>) => {
      state.error = action.payload.error;
    },
    setChainId: (state, action: PayloadAction<any>) => {
      state.chainId = action.payload.chainId;
    },  
    setNetwork: (state, action: PayloadAction<any>) => {
      state.network = action.payload.network;
    },     
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
    //   extraReducers: (builder) => {
    //     builder
    //       .addCase(incrementAsync.pending, (state) => {
    //         state.status = 'loading';
    //       })
    //       .addCase(incrementAsync.fulfilled, (state, action) => {
    //         state.status = 'idle';
    //         state.value += action.payload;
    //       })
    //       .addCase(incrementAsync.rejected, (state) => {
    //         state.status = 'failed';
    //       });
    //   },
});

export const { setWallets,setProvider,setLibrary,setAccount,setError,setChainId,setNetwork } = walletsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectWallets = (state: RootState) => state.wallets;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default walletsSlice.reducer;
